// Code generated by MockGen. DO NOT EDIT.
// Source: internal/fileserver/fileserver.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"github.com/marcusadriano/tgbot-stt/pkg/fileserver"
)

// MockFileserver is a mock of Fileserver interface.
type MockFileserver struct {
	ctrl     *gomock.Controller
	recorder *MockFileserverMockRecorder
}

// MockFileserverMockRecorder is the mock recorder for MockFileserver.
type MockFileserverMockRecorder struct {
	mock *MockFileserver
}

// NewMockFileserver creates a new mock instance.
func NewMockFileserver(ctrl *gomock.Controller) *MockFileserver {
	mock := &MockFileserver{ctrl: ctrl}
	mock.recorder = &MockFileserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileserver) EXPECT() *MockFileserverMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileserver) Delete(ctx context.Context, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileserverMockRecorder) Delete(ctx, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileserver)(nil).Delete), ctx, fileName)
}

// Read mocks base method.
func (m *MockFileserver) Read(ctx context.Context, fileName string) (*fileserver.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, fileName)
	ret0, _ := ret[0].(*fileserver.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileserverMockRecorder) Read(ctx, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileserver)(nil).Read), ctx, fileName)
}

// Save mocks base method.
func (m *MockFileserver) Save(ctx context.Context, file fileserver.File) (*fileserver.FilePath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, file)
	ret0, _ := ret[0].(*fileserver.FilePath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockFileserverMockRecorder) Save(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileserver)(nil).Save), ctx, file)
}
