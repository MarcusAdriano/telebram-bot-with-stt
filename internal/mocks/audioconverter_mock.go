// Code generated by MockGen. DO NOT EDIT.
// Source: internal/audioconverter/audioconverter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	audioconverter "github.com/marcusadriano/sound-stt-tgbot/internal/audioconverter"
)

// MockAudioConverter is a mock of AudioConverter interface.
type MockAudioConverter struct {
	ctrl     *gomock.Controller
	recorder *MockAudioConverterMockRecorder
}

// MockAudioConverterMockRecorder is the mock recorder for MockAudioConverter.
type MockAudioConverterMockRecorder struct {
	mock *MockAudioConverter
}

// NewMockAudioConverter creates a new mock instance.
func NewMockAudioConverter(ctrl *gomock.Controller) *MockAudioConverter {
	mock := &MockAudioConverter{ctrl: ctrl}
	mock.recorder = &MockAudioConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAudioConverter) EXPECT() *MockAudioConverterMockRecorder {
	return m.recorder
}

// ToMp3 mocks base method.
func (m *MockAudioConverter) ToMp3(ctx context.Context, fileData []byte, fileName string) (*audioconverter.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMp3", ctx, fileData, fileName)
	ret0, _ := ret[0].(*audioconverter.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToMp3 indicates an expected call of ToMp3.
func (mr *MockAudioConverterMockRecorder) ToMp3(ctx, fileData, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMp3", reflect.TypeOf((*MockAudioConverter)(nil).ToMp3), ctx, fileData, fileName)
}
